negaff_agent_lagged <- lme(
fixed = Naff_agent_next_day ~
Naff_agent +
PSC_agent_cw + NSC_agent_cw +
sbyday + weeknd2 +
PSC_agent_cb + NSC_agent_cb,
data = as.data.frame(df),
random = ~ PSC_agent_cw + NSC_agent_cw | CoupleID,
#correlation = corAR1(form = ~ 1 | CoupleID),
na.action = na.omit,
control = lmeControl(opt='optim',
maxIter = 1e4,
msMaxEval = 1e4)
)
check_singularity(negaff_agent_lagged)
check_model(negaff_agent_lagged)
knitr::opts_chunk$set(echo = TRUE)
options(dplyr.print_max = 100)
# importing data
try(DF <- haven::read_sav("C:/Users/pascku/OneDrive - Universität Zürich UZH/04 Papers/01 Dyactic Paper/Datensätze/DyadicDiaryT3T0+Acc_4Feld_200527.sav"))
try(DF <- haven::read_sav("C:/Users/kueng/OneDrive - Universität Zürich UZH/04 Papers/01 Dyactic Paper/Datensätze/DyadicDiaryT3T0+Acc_4Feld_200527.sav"))
df <- DF[,
c(
"sbyz_p", "sbwdat01",
# Variables used for calculations
"ppysko06", "ppysko09", "ppysko21", "ppysko25", # For PSC_agent
"ppysko03", "ppysko11", "ppysko26", "ppysko29", # For NSC_agent
"pbypan03", "pbypan14", "pbypan09", "pbypan12", "pbypan16", # For Paff_agent
"pbypan02", "pbypan04", "pbypan07", "pbypan15", "pbypan19", # For Naff_agent
"sbypan03", "sbypan14", "sbypan09", "sbypan12", "sbypan16", # For Paff_target
"sbypan02", "sbypan04", "sbypan07", "sbypan15", "sbypan19", # For Naff_target
"sbysug99", "sbysug98", # For Sup_target
"pbysug99", "pbysug98", # For Sup_agent
"sbytim99", "pbytim99", # For time_spent
"sb0bez_r", "sb0age01", "pb0age01", "sb0bmi", "pb0bmi", # For transformed variables
# Additional variables not used in calculations
"CoupleID", "pbwmvpa01", "sbwmvpa01", "pbwwear", "sbwwear",
"sbyday", "weeknd2", "EG", "sb0sex01", "pb0sex01", "sb0kih01"
)]
saveRDS(df, file = 'C:/Users/kueng/OneDrive - Universität Zürich UZH/04 Papers/01 Dyactic Paper/Paper/OSF Package/DataSet.rds')
df <- readRDS(file = 'C:/Users/kueng/OneDrive - Universität Zürich UZH/04 Papers/01 Dyactic Paper/Paper/OSF Package/DataSet.rds')
# load packages
library(ggplot2)
library(nlme)
library(MASS)
library(haven)
library(scales)
library(cowplot)
library(devtools)
library(ggResidpanel)
library(lme4)
library(glmmTMB)
library(DHARMa)
library(ggeffects)
library(broom.mixed)
library(easystats)
library(Hmisc)
library(bmlm)
library(tidyverse)
library(wbCorr)
DF$CoupleID <- as.factor(DF$CoupleID)
# Subsetting only the target person.
df <- DF[(DF["sbyz_p"] == 1), ]
# Date of diary days
range(df$sbwdat01, na.rm = T)
# Predictors
df$PSC_agent <- (df$ppysko06 + df$ppysko09 + df$ppysko21 + df$ppysko25) / 4
df$NSC_agent <- (df$ppysko03 + df$ppysko11 + df$ppysko26 + df$ppysko29) / 4
# Outcomes
df$Paff_agent <- (df$pbypan03 + df$pbypan14 + df$pbypan09 + df$pbypan12 + df$pbypan16) / 5
df$Naff_agent <- (df$pbypan02 + df$pbypan04 + df$pbypan07 + df$pbypan15 + df$pbypan19) / 5
df$Paff_target <- (df$sbypan03 + df$sbypan14 + df$sbypan09 + df$sbypan12 + df$sbypan16) / 5
df$Naff_target <- (df$sbypan02 + df$sbypan04 + df$sbypan07 + df$sbypan15 + df$sbypan19) / 5
# Covariates
## Social Support
df$Sup_target <- (df$sbysug99 + df$sbysug98) / 2
df$Sup_agent <- (df$pbysug99 + df$pbysug98) / 2
# preparing covariates for sensitivity Analysis
# mean for time spent together from each partners report.
df$time_spent <- df$sbytim99 + df$pbytim99 / 2
# renaming variables that have to be centered
df <- transform(df,
reldur = sb0bez_r,
sage = sb0age01,
page = pb0age01,
sbmi = sb0bmi,
pbmi = pb0bmi
)
# Dropping variables we don't need
## include variables of interest only
df <- df[, c(
"CoupleID", "PSC_agent", "NSC_agent", "pbwmvpa01", "sbwmvpa01",
"Paff_agent", "Naff_agent", "Paff_target", "Naff_target",
"Sup_agent", "Sup_target", "pbwwear", "sbwwear", "sbyday",
"weeknd2", "EG", "time_spent", "reldur", "sage", "page", "sbmi", "pbmi",
"sb0sex01", "pb0sex01",
"sb0kih01"
)]
# Filtering out days with low wear compliance
df <- df %>%
mutate(sbwmvpa01 = ifelse(sbwwear > 10, sbwmvpa01, NA),
pbwmvpa01 = ifelse(pbwwear > 10, pbwmvpa01, NA)
)
head(df)
table(df$EG) / 14
table(df$sb0sex01)
df <- isolate(df, by = 'CoupleID',
c("PSC_agent", "NSC_agent", "Sup_agent", "Sup_target", "time_spent",
"reldur", "sage", "page", "sbmi", "pbmi", "sbwwear", "pbwwear"),
which='both')
# Defining common elements
common_within_person_effects <- c(
'(Intercept)',
'---WITHIN-PERSON EFFECTS---',
'PSC_agent_cw',
'NSC_agent_cw',
'sbyday',
'weeknd2',
'weartime_cw'
)
common_between_person_effects <- c(
'PSC_agent_cb',
'NSC_agent_cb',
'weartime_cb',
'---PREVIOUS-DAY OUTCOMES---',
'Paff_agent',
'Paff_target',
'Naff_agent',
'Naff_target',
'pbwmvpa01',
'sbwmvpa01'
)
common_random_effects <- c(
'Std.Dev.(Intercept)|CoupleID',
'Std.Dev.PSC_agent_cw|CoupleID',
'Std.Dev.NSC_agent_cw|CoupleID',
'Cor.PSC_agent_cw.(Intercept)|CoupleID',
'Cor.NSC_agent_cw.(Intercept)|CoupleID',
'Cor.NSC_agent_cw.PSC_agent_cw|CoupleID'
)
common_model_info <- c(
'Within-group standard error',
'dispersion',
'AR1'
)
# Order for report
order_rep <- c(
common_within_person_effects,
'---BETWEEN-PERSON EFFECTS---',
common_between_person_effects,
'---RANDOM-EFFECTS---',
common_random_effects,
'---------MODEL INFO---------',
common_model_info
)
full_report <- function(model, order) {
if (class(model) == 'glmmTMB') {
return(report_glmmTMB(model, order))
} else {
return(report_nlme(model, order))
}
report_glmmTMB <- function(model, order) {
# Extracting model parameters and creating the initial dataframe
rep_df <- as.data.frame(model_parameters(model, exponentiate = TRUE))[,c('Parameter', 'Coefficient', 'SE', 'p', 'CI_low', 'CI_high', 'Effects', 'Component')]
# Removing rows where the Parameter includes 'factor'
rep_df <- rep_df[rep_df$Effects != 'random',]
# Adding confidence intervals
int <- as.data.frame(confint(model))
intt <- int[!grepl('factor', rownames(int)),]
intervals <- intt[grepl('CoupleID', rownames(intt)),]
df_intervals <- data.frame('Parameter' = rownames(intervals),
'Coefficient' = intervals$Estimate,
'SE' = NA,
'CI_low' = intervals$`2.5 %`,
'CI_high' = intervals$`97.5 %`,
'p' = NA,
'Effects' = 'random',
'Component' = 'conditional')
rep_df <- rbind(rep_df, df_intervals)
# Extracting the AR1 coefficient from the model
ar1 <- capture.output(summary(model)$varcor)
if (length(grep("ar1", ar1)) > 0) {
ar1_value <- as.numeric(strsplit(ar1[grep("ar1", ar1)], "\\(ar1\\)")[[1]][2])
} else {
ar1_value <- NA
}
# Combining and reporting
rep_df <- rep_df %>%
add_row(Parameter = '---WITHIN-PERSON EFFECTS---') %>%
add_row(Parameter = '---BETWEEN-PERSON EFFECTS---') %>%
add_row(Parameter = '---RANDOM-EFFECTS---') %>%
add_row(Parameter = 'Within-group standard error') %>%
add_row(Parameter = '---------MODEL INFO---------') %>%
add_row(Parameter = 'AR1', Coefficient = ar1_value)
rep_df
rep_df[rep_df$Component == 'dispersion' & rep_df$Parameter == '(Intercept)', ]$Parameter <- 'dispersion'
# Reorder the dataframe based on 'order'
rep_df$Parameter[rep_df$Parameter == "sbwwear_cw"] <- 'weartime_cw'
rep_df$Parameter[rep_df$Parameter == "sbwwear_cb"] <- 'weartime_cb'
rep_df$Parameter[rep_df$Parameter == "pbwwear_cw"] <- 'weartime_cw'
rep_df$Parameter[rep_df$Parameter == "pbwwear_cb"] <- 'weartime_cb'
rep_df <- rep_df[match(order, rep_df$Parameter),]
# Call function for rounding and adding stars
rep_df <- process_coefficients(rep_df)
return(rep_df)
}
report_nlme <- function(model, order) {
# Extracting fixed effects
rep_df <- as.data.frame(model_parameters(model))[,c('Parameter', 'Coefficient', 'SE', 'p', 'CI_low', 'CI_high', 'Effects')]
rep_df <- tryCatch({
# Confidence intervals of random effects
int <- intervals(model)
int_rand <- as.data.frame(int$reStruct)
# add AR1
int_ar1 <- as.data.frame(int$corStruct)
if (nrow(int_ar1) > 0) {
rownames(int_ar1) <- c('AR1')
colnames(int_ar1) <- colnames(int_rand)
int_rand <- rbind(int_rand, int_ar1)
} else {
# Create a row with NA values
na_row <- setNames(data.frame(matrix(NA, ncol = ncol(int_rand), nrow = 1)), colnames(int_rand))
rownames(na_row) <- 'AR1'
int_rand <- rbind(int_rand, na_row)
}
# Add Confint for sigma
int_resid <- as.data.frame(int$sigma)
int_rand[nrow(int_rand) + 1,] <- c(int_resid[1, 1], int_resid[2, 1], int_resid[3, 1])
rownames(int_rand)[nrow(int_rand)] <- 'Within-group standard error'
# Construct df
int_df <- data.frame(
Parameter = rownames(int_rand),
Coefficient = int_rand$CoupleID.est.,
SE = NA,
CI_low = int_rand$CoupleID.lower,
CI_high = int_rand$CoupleID.upper,
p = NA,
Effects = 'random'
)
# Combine
rep_df <- rep_df[rep_df$Effects != 'random',]
rep_df <- rbind(rep_df, int_df)
rep_df$Parameter[rep_df$Parameter == 'sd((Intercept))'] <- 'Std.Dev.(Intercept)|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'sd(PSC_agent_cw)'] <- 'Std.Dev.PSC_agent_cw|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'sd(NSC_agent_cw)'] <- 'Std.Dev.NSC_agent_cw|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'cor((Intercept),PSC_agent_cw)'] <- 'Cor.PSC_agent_cw.(Intercept)|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'cor((Intercept),NSC_agent_cw)'] <- 'Cor.NSC_agent_cw.(Intercept)|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'cor(PSC_agent_cw,NSC_agent_cw)'] <- 'Cor.NSC_agent_cw.PSC_agent_cw|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'cor(NSC_agent_cw,PSC_agent_cw)'] <- 'Cor.NSC_agent_cw.PSC_agent_cw|CoupleID'
rep_df
}, error = function(e) {
rep_df$Parameter[rep_df$Parameter == "SD (Intercept)"] <- 'Std.Dev.(Intercept)|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'SD (PSC_agent_cw)'] <- 'Std.Dev.PSC_agent_cw|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'SD (NSC_agent_cw)'] <- 'Std.Dev.NSC_agent_cw|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'Cor (Intercept~PSC_agent_cw)'] <- 'Cor.PSC_agent_cw.(Intercept)|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'Cor (Intercept~NSC_agent_cw)'] <- 'Cor.NSC_agent_cw.(Intercept)|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'Cor (PSC_agent_cw~NSC_agent_cw)'] <- 'Cor.NSC_agent_cw.PSC_agent_cw|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'Cor (NSC_agent_cw~PSC_agent_cw)'] <- 'Cor.NSC_agent_cw.PSC_agent_cw|CoupleID'
rep_df$Parameter[rep_df$Parameter == 'SD (Observations)'] <- 'Within-group standard error'
rep_df
}
)
# Finishing touches
rep_df <- rep_df %>%
add_row(Parameter = '---WITHIN-PERSON EFFECTS---') %>%
add_row(Parameter = '---BETWEEN-PERSON EFFECTS---') %>%
add_row(Parameter = '---RANDOM-EFFECTS---') %>%
add_row(Parameter = '---------MODEL INFO---------') %>%
add_row(Parameter = 'dispersion') %>%
add_row(Parameter = 'sbwwear_cb') %>%
add_row(Parameter = 'sbwwear_cw')
# Reorder the dataframe based on 'order'
rep_df <- rep_df[match(order, rep_df$Parameter),]
# Call function for rounding and adding stars
rep_df <- process_coefficients(rep_df)
return(rep_df)
}
process_coefficients <- function(df) {
# Round
df[, c(2, 3, 5, 6)] <- round(df[, c(2, 3, 5, 6)], 2)
df[, 4] <- round(df[, 4], 3)
# Add stars
df$Coefficient <- as.character(sprintf("%.2f", df$Coefficient))
df$Coefficient <- ifelse(is.na(df$p), df$Coefficient,
ifelse(df$p < 0.001, paste0(df$Coefficient, "***"),
ifelse(df$p < 0.01, paste0(df$Coefficient, "**"),
ifelse(df$p < 0.05, paste0(df$Coefficient, "*"),
df$Coefficient))))
return(df)
}
df <- df %>%
group_by(CoupleID) %>%
mutate(
pbwmvpa01_next_day = Lag(pbwmvpa01, -1),
Paff_target_next_day = Lag(Paff_target, -1),
Naff_target_next_day = Lag(Naff_target, -1),
sbwmvpa01_next_day = Lag(sbwmvpa01, -1),
Paff_agent_next_day = Lag(Paff_agent, -1),
Naff_agent_next_day = Lag(Naff_agent, -1)
) %>%
ungroup()
# Check if it is correct
df[ , c("CoupleID", "pbwmvpa01", "pbwmvpa01_next_day")]
posaff_target_lagged <- lme(
fixed = Paff_target_next_day ~
Paff_target +
PSC_agent_cw + NSC_agent_cw +
sbyday + weeknd2 +
PSC_agent_cb + NSC_agent_cb,
data = as.data.frame(df),
random = ~ PSC_agent_cw + NSC_agent_cw | CoupleID,
correlation = corAR1(form = ~ 1 | CoupleID),
na.action = na.omit,
control = lmeControl(opt='optim',
maxIter = 1e4,
msMaxEval = 1e4)
)
check_singularity(posaff_target_lagged)
check_model(posaff_target_lagged)
posaff_target_lagged_rep <- full_report(posaff_target_lagged, order_rep)
posaff_target_lagged_rep
# prepare to save to excel
all_models <- list(posaff_target_lagged_rep = posaff_target_lagged_rep)
### Base model for negative affect target
negaff_target_lagged <- lme(
fixed = Naff_target_next_day ~
Naff_target +
PSC_agent_cw + NSC_agent_cw +
sbyday + weeknd2 +
PSC_agent_cb + NSC_agent_cb,
data = as.data.frame(df),
random = ~ 1 | CoupleID,
#correlation = corAR1(form = ~ 1 | CoupleID),
na.action = na.omit,
control = lmeControl(opt='optim',
maxIter = 1e4,
msMaxEval = 1e4)
)
check_singularity(negaff_target_lagged)
check_model(negaff_target_lagged)
negaff_target_lagged_rep <- full_report(negaff_target_lagged, order=order_rep)
negaff_target_lagged_rep
# Add to list
all_models[['negaff_target_lagged_rep']] <- negaff_target_lagged_rep
mvpa_target_lagged <- glmmTMB(
sbwmvpa01_next_day ~
sbwmvpa01 +
PSC_agent_cw + NSC_agent_cw +
sbyday + weeknd2 +
PSC_agent_cb + NSC_agent_cb +
sbwwear_cw + sbwwear_cb +
(1 | CoupleID),
family = nbinom1,
data = df,
control = glmmTMBControl(optArgs = list(iter.max = 1e4, eval.max = 1e4))
)
check_singularity(mvpa_target_lagged)
simResids <- simulateResiduals(mvpa_target_lagged, nSim=1005)
plot(simResids)
mvpa_target_lagged_rep <- full_report(mvpa_target_lagged, order_rep)
mvpa_target_lagged_rep
# extend list
all_models[['mvpa_target_lagged_rep']] <- mvpa_target_lagged_rep
posaff_agent_lagged <- lme(
fixed = Paff_agent_next_day ~
Paff_agent +
PSC_agent_cw + NSC_agent_cw +
sbyday + weeknd2 +
PSC_agent_cb + NSC_agent_cb,
data = as.data.frame(df),
random = ~ 1 | CoupleID,
correlation = corAR1(form = ~ 1 | CoupleID),
na.action = na.omit,
control = lmeControl(opt='optim',
maxIter = 1e4,
msMaxEval = 1e4)
)
check_singularity(posaff_agent_lagged)
check_model(posaff_agent_lagged)
posaff_agent_lagged_rep <- full_report(posaff_agent_lagged,order=order_rep)
posaff_agent_lagged_rep
# Add to list
all_models[['posaff_agent_lagged_rep']] <- posaff_agent_lagged_rep
### Base model for negative affect target
# Specifying model for Negative Affect
negaff_agent_lagged <- lme(
fixed = Naff_agent_next_day ~
Naff_agent +
PSC_agent_cw + NSC_agent_cw +
sbyday + weeknd2 +
PSC_agent_cb + NSC_agent_cb,
data = as.data.frame(df),
random = ~ PSC_agent_cw + NSC_agent_cw | CoupleID,
#correlation = corAR1(form = ~ 1 | CoupleID),
na.action = na.omit,
control = lmeControl(opt='optim',
maxIter = 1e4,
msMaxEval = 1e4)
)
check_singularity(negaff_agent_lagged)
check_model(negaff_agent_lagged)
negaff_agent_lagged_rep <- full_report(negaff_agent_lagged,order=order_rep)
negaff_agent_lagged_rep
# Add to list
all_models[['negaff_agent_lagged_rep']] <- negaff_agent_lagged_rep
# Base Model (not converging)
mvpa_partner_lagged <- glmmTMB(
pbwmvpa01_next_day ~
pbwmvpa01 +
PSC_agent_cw + NSC_agent_cw +
sbyday + weeknd2 +
PSC_agent_cb + NSC_agent_cb +
pbwwear_cw + pbwwear_cb +
(1 | CoupleID),
family = nbinom1,
data = df,
control = glmmTMBControl(optimizer = nlminb,
optArgs = list(iter.max = 1e4,
eval.max = 1e4))
)
check_singularity(mvpa_partner_lagged)
simResids <- simulateResiduals(mvpa_partner_lagged, nSim = 1005)
plot(simResids)
mvpa_agent_lagged_rep <- full_report(mvpa_partner_lagged, order= order_rep)
mvpa_agent_lagged_rep
# Add to list
all_models[['mvpa_agent_lagged_rep']] <- mvpa_agent_lagged_rep
report_side_by_side <- function(models, order, model_names) {
if (length(models) != length(model_names)) {
stop('Number of models must match number of model names.')
}
report_finished <- NULL
for (i in 1:length(models)) {
rep <- full_report(models[[i]], order)
rownames(rep) <- order
rep$CI <- ifelse(is.na(rep$CI_low), NA,
paste0('[', rep$CI_low, ', ', rep$CI_high, ']')
)
rep <- rep[ , c('Coefficient', 'CI')]
colnames(rep) <- paste(colnames(rep), model_names[i])
rep
#in the first round, we keep the column with the names to the left.
if (i == 1) {
rep$Parameter <- rownames(rep)
rep <- rep[, c(3, 1,2)]
}
# Combine
if (is.null(report_finished)) {
report_finished <- rep
} else {
report_finished <- cbind(report_finished, rep)
}
rownames(report_finished) <- NULL
return(report_finished)
}
export_everything <- list()
base_models <- report_side_by_side(
models = list(
posaff_agent_lagged, posaff_target_lagged,
negaff_agent_lagged, negaff_target_lagged,
mvpa_partner_lagged, mvpa_target_lagged
),
order <- order_rep,
model_names = list(
'Posaff Agent Next Day', 'Posaff Target Next Day',
'Negaff Agent Next Day', 'Negaff Target Next Day',
'MVPA Agent Next Day', 'MVPA Target Next Day'
)
base_models
export_everything$Base_Models <- base_models
writexl::write_xlsx(export_everything, 'all_tables_lagged_huge.xlsx')
renv::status()
install.packages('yaml')
renv::restore()
renv::status()
install.packages('patchwork')
renv::status()
renv::snapshot()
renv::activate()
knitr::opts_chunk$set(echo = TRUE)
options(dplyr.print_max = 100)
library('ggplot2')
library('nlme')
library('MASS')
library('haven')
library('scales')
library('cowplot')
library('devtools')
library('ggResidpanel')
library('lme4')
library('glmmTMB')
library('DHARMa')
library('ggeffects')
library('broom.mixed')
library('easystats')
library('Hmisc')
library('bmlm')
library('tidyverse')
library('wbCorr')
library('psych')
library('report')
library('lavaan')
library('basicPlotteR')
library('misty')
library('dplyr')
# importing data
DF <- haven::read_sav("C:/Users/kueng/OneDrive - Universität Zürich UZH/04 Papers/01 Dyactic Paper/Datensätze/DyadicDiaryT3T0+Acc_4Feld_200527.sav")
# importing data
DF <- haven::read_sav("C:/Users/kueng/OneDrive - Universität Zürich UZH/04 Papers/01 Dyactic Paper/Datensätze/DyadicDiaryT3T0+Acc_4Feld_200527.sav")
renv::status()
renv::activate()
renv::restore()
